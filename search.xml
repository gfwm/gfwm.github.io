<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java变量]]></title>
    <url>%2F2018%2F07%2F28%2FJava%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Java数据类型]]></title>
    <url>%2F2018%2F07%2F28%2FJava%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[Java基本数据类型###当创建变量的时候，需要在内存中申请空间。内存管理系统根据变量的类型分配存储空间，分配的空间只能用来存储该类型数据 ##Java的两大数据类型： 内置数据类型 引用数据类型 ##内置数据类型java语言提供了八种基本类型。六种数字类型（四种整数类型，两种浮点型），一种字符类型，还有一种布尔型。 ###byte byte数据类型是八位，有符号的，以二进制补码表示的整数； 最小值是-128，最大值127（2*7-1）； 默认值0； byte类型用于在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一； ###short short数据类型是16位，有符号的以二进制补码表示的整数 最小值是-32768，最大值32767； 一个short变量是int空间的二分之一； 默认值是0；###int int数据类型是32位，有符号的以二进制为补码的整数 最小值是 -2,147,483,648（-2^31）最大值是 2,147,483,647（2^31 - 1）； 一般整型变量默认为int型； 默认值是0； ###long long数据类型是64位，有符号的以二进制为补码的整数 最小值是-9,223,372,036,854,775,808（-2^63）；最大值是 9,223,372,036,854,775,807（2^63 -1）； 主要用于比较大整数的系统 默认值为0； ###float float是单精度，32位的浮点数； float在存储大型浮点数组的时候可以节省内存空间； 默认值是0.0f； 浮点数不能用来表示精确的值，如货币； ###double double数据类型是双精度，64位的浮点数； 只有两个取值：true false 默认值false ###char char类型是一种单一的16位Unicode字符 最小值是\u0000(即0)； 最大值是\uffff(即65535); char类型可以存储任何字符 ##实际上，JAVA中还存在另外一种基本类型void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。 ##引用类型 在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。 对象、数组都是引用数据类型。 所有引用类型的默认值都是null。 一个引用变量可以用来引用任何与之兼容的类型 例子：Site site = new Site(“Runoob”)。 ##Java 常量 常量在程序运行时是不能被修改的。 在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似： final double PI = 3.1415927; 虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。 字面量可以赋给任何内置类型的变量。例如： byte a = 68; char a = &apos;A&apos; byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。 当使用常量的时候，前缀 0 表示 8 进制，而前缀 0x 代表 16 进制, 例如： int decimal = 100; int octal = 0144; int hexa = 0x64; 和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子： &quot;Hello World&quot; &quot;two\nlines&quot; &quot;\&quot;This is in quotes\&quot;&quot; 字符串常量和字符常量都可以包含任何Unicode字符。例如： char a = &apos;\u0001&apos;; String a = &quot;\u0001&quot;; ##自动类型转换 整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。 转换从低级到高级。 低 ------------------------------------&gt; 高 byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double 数据类型转换必须满足如下规则： 不能对boolean类型进行类型转换。 不能把对象类型转换成不相关类的对象。 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。 转换过程中可能导致溢出或损失精度，例如： int i =128; byte b = (byte)i; 因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如： (int)23.7 == 23; (int)-45.89f == -45 ###自动类型转换 ###必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。 ##强制类型转换 条件是转换的数据类型必须是兼容的。 格式：(type)value type是要强制类型转换后的数据类型 实例： public class QiangZhiZhuanHuan{ public static void main(String[] args){ int i1 = 123; byte b = (byte)i1;//强制类型转换为byte System.out.println(&quot;int强制类型转换为byte后的值等于&quot;+b); } } 运行结果： int强制类型转换为byte后的值等于123 隐含强制类型转换 整数的默认类型是 int。 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
